// Generated by CoffeeScript 1.6.3
(function() {
  var module, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.TastyResourceFactory = (function() {
    function TastyResourceFactory($http, _config) {
      var _base;
      this.$http = $http;
      this._config = _config;
      (_base = this._config).cache || (_base.cache = false);
      this._resolved = true;
    }

    TastyResourceFactory.prototype.queryURL = function(url, parameters, success, error) {
      var attr, params, promise, results, value,
        _this = this;
      results = [];
      params = [];
      for (attr in parameters) {
        value = parameters[attr];
        params.push("" + attr + "=" + value);
      }
      if (params.length > 0) {
        url = "" + url + "?" + (params.join('&'));
      }
      this._resolved = false;
      promise = this.$http.get(url, {
        cache: this._config.cache
      });
      promise.then(function(response) {
        var object, _i, _len, _ref;
        if (response.data.objects != null) {
          _ref = response.data.objects;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            object = _ref[_i];
            results.push(_this._create_resource(object));
          }
          return results.meta = response.data.meta;
        } else {
          return angular.copy(response.data, results);
        }
      });
      promise.then(function() {
        return _this._resolved = true;
      });
      promise.then(success, error);
      return results;
    };

    TastyResourceFactory.prototype.query = function(filter, success, error) {
      return this.queryURL(this._config.url, filter, success, error);
    };

    TastyResourceFactory.prototype.get = function(id, success, error) {
      var promise, resource, url,
        _this = this;
      url = this._get_detail_url(id);
      resource = new TastyResourceFactory(this.$http, this._config);
      this._resolved = false;
      promise = this.$http.get(url, {
        cache: this._config.cache
      });
      promise.then(function(response) {
        var key, value, _ref, _results;
        _ref = response.data;
        _results = [];
        for (key in _ref) {
          value = _ref[key];
          _results.push(resource[key] = value);
        }
        return _results;
      });
      promise.then(function() {
        return _this._resolved = true;
      });
      promise.then(success, error);
      return resource;
    };

    TastyResourceFactory.prototype.post = function() {
      var promise,
        _this = this;
      this._resolved = false;
      promise = this.$http.post(this._config.url, this._get_data());
      promise.then(function() {
        return _this._resolved = true;
      });
      promise.success(function(response, status, headers) {
        return _this._config.detail_url = headers("Location");
      });
      return promise;
    };

    TastyResourceFactory.prototype.put = function(id) {
      var promise, url,
        _this = this;
      url = this._get_detail_url(id);
      this._resolved = false;
      promise = this.$http.put(url, this._get_data());
      promise.then(function() {
        return _this._resolved = true;
      });
      return promise;
    };

    TastyResourceFactory.prototype.patch = function(id) {
      var promise, url,
        _this = this;
      url = this._get_detail_url(id);
      this._resolved = false;
      promise = this.$http({
        method: "PATCH",
        url: url,
        data: this._get_data()
      });
      promise.then(function() {
        return _this._resolved = true;
      });
      return promise;
    };
    //added by @kamal_alseisy
    TastyResourceFactory.prototype.delete = function(id) {
      var promise, url,
        _this = this;
      url = this._get_detail_url(id);
      this._resolved = false;
      promise = this.$http.delete(url);
      promise.then(function() {
        return _this._resolved = true;
      });
      return promise;
    };
    //end added by @kamal_alseisy
    TastyResourceFactory.prototype.resolved = function() {
      return this._resolved;
    };

    TastyResourceFactory.prototype._get_detail_url = function(id) {
      var url;
      url = this._config.url;
      if (id == null) {
        id = this.id;
      }
      if (id && id[0] === "/") {
        this._config.detail_url = id;
      } else {
        this._config.detail_url = "" + this._config.url + id + "/";
      }
      return this._config.detail_url;
    };

    TastyResourceFactory.prototype._get_data = function() {
      var attr, data, value, _ref;
      data = {};
      for (attr in this) {
        value = this[attr];
        if (typeof value !== "function" && ((_ref = attr[0]) !== "$" && _ref !== "_")) {
          if (value instanceof TastyResourceFactory) {
            data[attr] = value.resource_uri;
          } else {
            data[attr] = value;
          }
        }
      }
      return data;
    };

    TastyResourceFactory.prototype._create_resource = function(data) {
      var key, resource, value;
      resource = new TastyResourceFactory(this.$http, this._config);
      for (key in data) {
        value = data[key];
        resource[key] = value;
      }
      return resource;
    };

    return TastyResourceFactory;

  })();

  module = angular.module("tastyResource", []);

  module.factory("TastyResource", [
    "$http", function($http) {
      return function(config) {
        return new TastyResourceFactory($http, config);
      };
    }
  ]);

}).call(this);
